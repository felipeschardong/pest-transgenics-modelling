# Importing libraries and packages
import os
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
import matplotlib.animation as animation
from matplotlib.animation import FuncAnimation
from matplotlib import animation
from matplotlib.patches import Rectangle
from IPython.display import HTML


# Initial parameters
na = 36
b = 0.5
mii = 0.3
gamma = 400

# Case I: Complete resistance – low fitness costs in refuge
wlr1, wlh1, wls1 = 1.0, 0.05, 0.0
wlr2, wlh2, wls2 = 0.9, 0.9, 1.0

# Case II: Complete resistance – high fitness costs in refuge
#wlr1, wlh1, wls1 = 1.0, 0.05, 0.0
#wlr2, wlh2, wls2 = 0.3, 0.9, 1.0

# Case III: Incomplete resistance
#wlr1, wlh1, wls1 = 0.5, 0.05, 0.0
#wlr2, wlh2, wls2 = 0.9, 0.9, 1.0

# Minimum number of cells to be occupied
min_cells = 15  

# Initial spatial distribution of genotypes
np.random.seed(41)
Xz = np.zeros((na, na))

np.random.seed(41)
Yz = np.zeros((na, na))
occupied_y = 0
while occupied_y < min_cells:
    for i in range(1, na-1):
        for j in range(1, na-1):
            if np.random.rand() < 0.01 and Yz[i, j] == 0:
                Yz[i, j] = 49
                occupied_y += 1
            if occupied_y >= min_cells:
                break
        if occupied_y >= min_cells:
            break

np.random.seed(41)
Hz = np.zeros((na, na))
occupied_h = 0
while occupied_h < min_cells:
    for i in range(1, na-1):
        for j in range(1, na-1):
            if np.random.rand() < 0.01 and Hz[i, j] == 0:
                Hz[i, j] = 1
                occupied_h += 1
            if occupied_h >= min_cells:
                break
        if occupied_h >= min_cells:
            break

# Diffusion
def diff_matrix(matrix, mii):
    result = np.copy(matrix)
    for i in range(1, na-1):
        for j in range(1, na-1):
            result[i, j] = (
                (1 - mii) * matrix[i, j]
                + mii / 4 * (matrix[i-1, j] + matrix[i+1, j] + matrix[i, j-1] + matrix[i, j+1])
            )
    return result

# Function to create Wx, Wy, and Wz with stripes
def create_W_matrices(na, condition_limit=None, pattern=None, wlr1=wlr1, wlr2=wlr2, wls1=wls1, wls2=wls2, wlh1=wlh1, wlh2=wlh2):
    Wx = np.zeros((na, na))
    Wy = np.zeros((na, na))
    Wz = np.zeros((na, na))
    for i in range(na):
        for j in range(na):
            if i < 1 or i > na - 1 or j < 1 or j > na - 1:
                Wx[i, j], Wy[i, j], Wz[i, j] = 0, 0, 0
            else:
                if pattern:
                    if pattern == "4_fileiras":
                        rows = [29, 22, 15, 8]
                    elif pattern == "8_fileiras":
                        rows = [33, 29, 25, 21, 17, 13, 9, 5]
                    elif pattern == "11_fileiras":
                        rows = [34, 31, 28, 25, 22, 19, 16, 13, 10, 7, 4]
                    elif pattern == "14_fileiras":
                        rows = [35, 33, 30, 28, 25, 23, 20, 18, 15, 13, 10, 8, 5, 3]
                    elif pattern == "17_fileiras":
                        rows = [35, 33, 31, 29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3]
                    else:
                        rows = []

                    if i in rows and 1 <= j <= 35:
                        Wx[i, j], Wy[i, j], Wz[i, j] = wlr2, wls2, wlh2
                    else:
                        Wx[i, j], Wy[i, j], Wz[i, j] = wlr1, wls1, wlh1
                elif condition_limit:
                    if i >= na - condition_limit and 1 <= j <= 35:
                        Wx[i, j], Wy[i, j], Wz[i, j] = wlr2, wls2, wlh2
                    else:
                        Wx[i, j], Wy[i, j], Wz[i, j] = wlr1, wls1, wlh1
    return Wx, Wy, Wz

# Conditions to be tested
patterns = ["4_fileiras", "8_fileiras", "11_fileiras", "14_fileiras", "17_fileiras"]

# Initializes dictionaries to store different types of simulation data
results = {}
generations_to_half = {}
evolution_data = {} 

# Mapping of conditions to θ values (refuge area)
pattern_to_value = {
    "4_fileiras": 4,
    "8_fileiras": 8,
    "11_fileiras": 11,
    "14_fileiras": 14,
    "17_fileiras": 17
}

# Iteration over each condition
for pattern in patterns:
    Wx, Wy, Wz = create_W_matrices(na, pattern=pattern)
    
    # Stores the temporal evolution of each genotype
    evolution_data[pattern] = {
        'RG': [],
        'SG': [],
        'HG': []
    }

    iterations = 51

    # Stores the frequencies of each genotype
    vfplr, vfpls, vfplh = [], [], []

    # Temporary genotype distribution (initial state)
    Xz_temp, Yz_temp, Hz_temp = np.copy(Xz), np.copy(Yz), np.copy(Hz)

    # Stores the initial condition (generation 0)
    evolution_data[pattern]['RG'].append(Xz_temp.copy())
    evolution_data[pattern]['SG'].append(Yz_temp.copy())
    evolution_data[pattern]['HG'].append(Hz_temp.copy())

    # Space-time update loop
    for gen in range(iterations):
        for _ in range(1): # diffusion steps (k=1, k=5, k=10)
            hax = diff_matrix(Xz_temp, mii)
            hay = diff_matrix(Yz_temp, mii)
            hah = diff_matrix(Hz_temp, mii)

            Xz_temp, Yz_temp, Hz_temp = hax, hay, hah
         
        A = 0.5 * (hax + hay + hah)

        P = np.zeros((na, na))
        Q = np.zeros((na, na))
        for i in range(na):
            for j in range(na):
                if hax[i, j] + hay[i, j] + hah[i, j] > 0:
                    P[i, j] = (hax[i, j] + 0.5 * hah[i, j]) / (hax[i, j] + hay[i, j] + hah[i, j])
                    Q[i, j] = (hay[i, j] + 0.5 * hah[i, j]) / (hax[i, j] + hay[i, j] + hah[i, j])

        X = (P**2 * gamma * A / (1 + b * A)) * Wx
        Y = (Q**2 * gamma * A / (1 + b * A)) * Wy
        Z = (2 * P * Q * gamma * A / (1 + b * A)) * Wz
        
        # Stores the current state for animation
        evolution_data[pattern]['RG'].append(Xz_temp.copy())
        evolution_data[pattern]['SG'].append(Yz_temp.copy())
        evolution_data[pattern]['HG'].append(Hz_temp.copy())

        Xz_temp, Yz_temp, Hz_temp = X, Y, Z

        # Aggregate total genotype frequencies
        ptlr = np.sum(X)
        ptls = np.sum(Y)
        ptlh = np.sum(Z)

        # Frequency of each genotype
        fplr = ptlr / (ptlr + ptls + ptlh)
        fpls = ptls / (ptlr + ptls + ptlh)
        fplh = ptlh / (ptlr + ptls + ptlh)

        # Frequency of the resistant allele
        fpr = (ptlr + 0.5*ptlh) / (ptlr + ptls + ptlh)

        # Stores genotype frequencies over time
        vfplr.append(fplr)
        vfpls.append(fpls)
        vfplh.append(fplh)

        # Checks whether the resistant allele reaches or exceeds 1/2
        if fpr >= 0.5 and pattern not in generations_to_half:
            generations_to_half[pattern] = gen + 1  # Stores the number of generations until 1/2

    # Saving the results for the current condition
    results[pattern] = (vfplr, vfpls, vfplh)

# If it didn't reach 1/2 after all iterations, add 0
for pattern in patterns:
    if pattern not in generations_to_half:
        generations_to_half[pattern] = 0

# Plotting the results
plt.figure(figsize=(10, 6))
lines = []
labels = []

# Resistant genotype curves
for pattern in patterns:
    vfplr, vfpls, vfplh = results[pattern]
    theta_value = (pattern_to_value[pattern] / 34) * 100 
    theta_str = str(int(theta_value))[:2]  
    line_res, = plt.plot(vfplr, label=fr'RG ($N_2 = {theta_str}$%)', linestyle='solid')
    lines.append(line_res)
    labels.append(fr'RG ($N_2 = {theta_str}$%)')

# Susceptible genotype curves
for pattern in patterns:
    vfplr, vfpls, vfplh = results[pattern]
    theta_value = (pattern_to_value[pattern] / 34) * 100  
    theta_str = str(int(theta_value))[:2]  
    line_sus, = plt.plot(vfpls, label=fr'SG ($N_2 = {theta_str}$%)', linestyle='dotted')
    lines.append(line_sus)
    labels.append(fr'SG ($N_2 = {theta_str}$%)')

# Heterozygous genotype curves
for pattern in patterns:
    vfplr, vfpls, vfplh = results[pattern]
    theta_value = (pattern_to_value[pattern] / 34) * 100  
    theta_str = str(int(theta_value))[:2]  
    line_het, = plt.plot(vfplh, label=fr'HG ($N_2 = {theta_str}$%)', linestyle='dashed')
    lines.append(line_het)
    labels.append(fr'HG ($N_2 = {theta_str}$%)')

# Setting the axes and title
plt.xlabel("Generations", fontsize=27, fontweight='bold')
plt.ylabel("Genotype Frequency", fontsize=27, fontweight='bold')
plt.xlim(-0.5, 50)

ax = plt.gca()  
ax.tick_params(axis='both', labelsize=17)  
for label in ax.get_xticklabels() + ax.get_yticklabels():
    label.set_fontweight('bold')  

# Legend
plt.legend(lines, labels, loc='center left', bbox_to_anchor=(1.02, 0.5),  prop={'weight': 'bold', 'size': 18})
plt.tight_layout()  
plt.grid(False)

# Saving the figure in the Downloads folder
download_path = os.path.join(os.path.expanduser('~'), 'Downloads', 'stripe_configuration_parameter_set1_reaction_difusion.png')
plt.savefig(download_path, dpi=300, bbox_inches='tight')

plt.show()

# Displaying the number of generations until the resistant allele reaches 1/2
generation_values = []
for pattern, gen_count in generations_to_half.items():
    generation_values.append(gen_count) 

print("stripe =", generation_values)

#############################################################################################################################
##########################################  SPATIAL DISTRIBUTION ############################################################
#############################################################################################################################

# Condition and times
pattern = "8_fileiras" # other conditions: "4_fileiras", "8_fileiras", "11_fileiras", "14_fileiras", "17_fileiras"
it_values = [5, 10, 50]

# Genotype spatial distribution at selected times
def get_data(genotype):
    return [evolution_data[pattern][genotype][t] for t in it_values]

# Spatial data for each genotype
rg = get_data('RG')
sg = get_data('SG')
hg = get_data('HG')

# Create a 3x3 grid of subplots
fig, axs = plt.subplots(3, 3, figsize=(9, 10))  

# Lists of genotype data and corresponding labels 
genotype_data = [rg, sg, hg]
genotype_labels = ["Resistant\nGenotype", "Susceptible\nGenotype", "Heterozygous\nGenotype"]

# Main loop
for row, (label, data) in enumerate(zip(genotype_labels, genotype_data)):
    for col, (t, img) in enumerate(zip(it_values, data)):
        ax = axs[row, col]
        ax.imshow(img, cmap='binary')
       
        if row == 0:
            ax.set_title(f't={t}', fontsize=30, weight='bold')
        
        ax.add_patch(Rectangle((0, 0), 1, 1, transform=ax.transAxes, ec='black', lw=3, fill=False))
        ax.axis('off')
   
    axs[row, 0].annotate(label, xy=(-0.22, 0.5), xycoords='axes fraction', fontsize=18, weight='bold', ha='center', va='center', rotation=90)
    
plt.subplots_adjust(left=0.15, right=0.95, top=0.7, bottom=0.00, hspace=0.03, wspace=0.02)

# Save the figure in the Downloads folder
plt.savefig(os.path.expanduser('~/Downloads/spatial_distribution_stripes.png'), dpi=200, bbox_inches='tight')

plt.show()

#############################################################################################################################
################################################# ANIMATION #################################################################
#############################################################################################################################

# Condition
pattern_to_animate = "8_fileiras"  # other conditions: "4_fileiras", "8_fileiras", "11_fileiras", "14_fileiras", "17_fileiras" 

# Creating the figure
fig = plt.figure(figsize=(15, 5))  # Ajuste de tamanho para ficar igual ao segundo código
gs = fig.add_gridspec(2, 3, height_ratios=[10, 1])  # Mesma estrutura de grid
axes = [fig.add_subplot(gs[0, i]) for i in range(3)]
text_ax = fig.add_subplot(gs[1, :])  # Área para o texto
titles = ["Resistant", "Susceptible", "Heterozygous"]

# Dynamic bottom text 
text_ax.axis('off')
title_text = text_ax.text(
    0.5, 0.5, "", ha='center', va='center',
    fontsize=20, fontweight='bold',
    transform=text_ax.transAxes
)

# Animation update function
def update(frame):
    for ax, title, data in zip(axes, titles, ['RG', 'SG', 'HG']):
        ax.clear()
        ax.imshow(evolution_data[pattern_to_animate][data][frame], 
                  cmap='binary', interpolation='none')
        ax.set_title(f"{title}", fontweight='bold', fontsize=30) 
        ax.axis('off')
        rect = Rectangle((0, 0), 1, 1, transform=ax.transAxes, 
                         linewidth=4, edgecolor='black', facecolor='none')
        ax.add_patch(rect)
    
    title_text.set_text(f"Generation {frame}")
    title_text.set_fontsize(30)

    return axes + [title_text]


# Creates the animation
anim = FuncAnimation(fig, update, frames=51, interval=300)

# Saving the GIF 
download_path = os.path.join(os.path.expanduser('~'), 'Downloads', f'animation_stripe.gif')
anim.save(download_path, writer='pillow', fps=3, dpi=100)

# Display in notebook 
HTML(anim.to_jshtml())

