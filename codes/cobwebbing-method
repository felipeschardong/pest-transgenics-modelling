# Importing required libraries
import os
import numpy as np
import matplotlib.pyplot as plt

# Setting font style for plots
plt.rcParams['font.family'] = 'STIXGeneral'

# Recurrence function for the resistant allele frequency
def recurrence_relation(p, alpha, beta, gamma):
    numerator = p**2 * (alpha - gamma) + p * gamma
    denominator = p**2 * (alpha - 2*gamma + beta) + 2*p*(gamma - beta) + beta
    return numerator / denominator

# Parameter scenarios and their respective plotting options
conditions = [
    {'alpha': 0.1, 'beta': 0.8, 'gamma': 0.5,
     'initial_conditions': [0.9], 'label': '(a) Resistant allele extinct',
     'rec_pos': 0.6, 'rec_offset': -0.07, 'diag_pos': 0.6, 'diag_offset': 0.09,
     'arrow_limit': 10, 'cob_web_pos': 0.1},
     
    {'alpha': 0.8, 'beta': 0.1, 'gamma': 0.5,
     'initial_conditions': [0.3], 'label': '(b) Susceptible allele extinct',
     'rec_pos': 0.6, 'rec_offset': 0.07, 'diag_pos': 0.7, 'diag_offset': -0.09,
     'arrow_limit': 9, 'cob_web_pos': 0.1},
     
    {'alpha': 0.9, 'beta': 0.7, 'gamma': 0.1,
     'initial_conditions': [0.35, 0.6], 'label': '(c) Extinction of a allele',
     'rec_pos': 0.55, 'rec_offset': 0.07, 'diag_pos': 0.8, 'diag_offset': -0.09,
     'arrow_limit': 8, 'cob_web_pos': 0.2},
     
    {'alpha': 0.1, 'beta': 0.2, 'gamma': 0.9,
     'initial_conditions': [0.2, 0.9], 'label': '(d) Allele Coexistence',
     'rec_pos': 0.65, 'rec_offset': -0.07, 'diag_pos': 0.75, 'diag_offset': 0.09,
     'arrow_limit': 5, 'cob_web_pos': 0.17}
]

nit = 30  # Number of iterations

# Creating the plot with 4 side-by-side subplots
fig, axes = plt.subplots(1, 4, figsize=(24,6), sharex=True, sharey=True)
p_vals = np.linspace(0, 1, 400)  # Range of p values

# Loop over each condition 
for idx, (ax, cond) in enumerate(zip(axes, conditions)):
    
    # Plot recurrence curve (blue line)
    f_vals = recurrence_relation(p_vals, cond['alpha'], cond['beta'], cond['gamma'])
    ax.plot(p_vals, f_vals, color='blue', lw=2)

    # Plot recurrence label at an angle following the curve's slope
    x_rec = cond['rec_pos']
    y_rec = recurrence_relation(x_rec, cond['alpha'], cond['beta'], cond['gamma'])
    dx = 0.01
    slope_rec = (recurrence_relation(x_rec+dx, cond['alpha'], cond['beta'], cond['gamma']) - y_rec) / dx
    angle_rec = np.degrees(np.arctan(slope_rec))
    ax.text(x_rec, y_rec + cond['rec_offset'], "Recursion", color='blue', fontsize=30,
            rotation=angle_rec, rotation_mode='anchor',
            ha='center', va='center')

    # Plot the identity line (red dashed)
    ax.plot(p_vals, p_vals, color='red', linestyle='--', lw=2)
    x_diag = cond['diag_pos']
    y_diag = x_diag
    ax.text(x_diag, y_diag + cond['diag_offset'], "Diagonal", color='red', fontsize=30,
            rotation=45, rotation_mode='anchor',
            ha='center', va='center')

    # Plot the Cobweb diagram 
    for pt_initial in cond['initial_conditions']:
        sol = [pt_initial]
        pt = pt_initial
        for _ in range(nit):
            pt = recurrence_relation(pt, cond['alpha'], cond['beta'], cond['gamma'])
            sol.append(pt)

        # Determine line color for trajectories (different if two initial conditions)
        if len(cond['initial_conditions']) == 1:
            line_color = 'black'
        else:
            line_color = 'black' if pt_initial == cond['initial_conditions'][0] else 'green'

        arrow_limit = cond['arrow_limit']
        arrow_count = 0

        # Vertical segment from (p0, 0) to (p0, f(p0))
        f0 = recurrence_relation(sol[0], cond['alpha'], cond['beta'], cond['gamma'])
        ax.plot([sol[0], sol[0]], [0, f0], color=line_color, lw=1)
        if arrow_count < arrow_limit:
            mid_x = sol[0]
            mid_y = f0 / 2
            ax.text(mid_x, mid_y, "►", color='black', fontsize=15, rotation=90,
                    ha='center', va='center')
            arrow_count += 1

        # Horizontal segment from (p0, f(p0)) to (p1, f(p0))
        ax.plot([sol[0], sol[1]], [f0, f0], color=line_color, lw=1)
        if arrow_count < arrow_limit:
            mid_x = (sol[0] + sol[1]) / 2
            mid_y = f0
            angle = 0 if sol[1] >= sol[0] else 180
            ax.text(mid_x, mid_y, "►", color='black', fontsize=15, rotation=angle,
                    ha='center', va='center')
            arrow_count += 1

        # Label "Cob-web" next to the first segment
        ax.text(sol[0] + 0.06, f0/2 + cond['cob_web_pos'], "Cob-web", color=line_color, fontsize=27,
                rotation=90, rotation_mode='anchor',
                ha='right', va='center')

        
        # Remaining segments of the Cobweb path
        for t in range(1, len(sol)-1):
            # Vertical segment
            ax.plot([sol[t], sol[t]], [sol[t], sol[t+1]], color=line_color, lw=1)
            if arrow_count < arrow_limit:
                mid_x_v = sol[t]
                mid_y_v = (sol[t] + sol[t+1]) / 2
                angle_v = 90 if sol[t+1] >= sol[t] else -90
                ax.text(mid_x_v, mid_y_v, "►", color='black', fontsize=15, rotation=angle_v,
                        ha='center', va='center')
                arrow_count += 1

            # Horizontal segment
            ax.plot([sol[t], sol[t+1]], [sol[t+1], sol[t+1]], color=line_color, lw=1)
            if arrow_count < arrow_limit:
                mid_x_h = (sol[t] + sol[t+1]) / 2
                mid_y_h = sol[t+1]
                angle_h = 0 if sol[t+1] >= sol[t] else 180
                ax.text(mid_x_h, mid_y_h, "►", color='black', fontsize=15, rotation=angle_h,
                        ha='center', va='center')
                arrow_count += 1

        # Mark the initial point
        ax.plot(sol[0], 0, 'o', color=line_color, markersize=6)

    # Display parameters and inequality relations 
    alpha = cond['alpha']
    beta  = cond['beta']
    gamma = cond['gamma']

    param_values_str = f"$\\alpha = {alpha:.2f}$\n$\\gamma = {gamma:.2f}$\n$\\beta = {beta:.2f}$"
    params = [('\\alpha', alpha), ('\\gamma', gamma), ('\\beta', beta)]
    sorted_params = sorted(params, key=lambda x: x[1])
    order_str = " < ".join([p[0] for p in sorted_params])
    order_str = f"$ {order_str} $"
    legend_str = f"{param_values_str}\n{order_str}"

    ax.text(0.05, 0.95, legend_str, transform=ax.transAxes,
            fontsize=22, verticalalignment='top', bbox=dict(facecolor='white', alpha=0.5), fontweight='bold')

    # Set title and axis style
    ax.set_title(f"{cond['label']}", fontsize=30, fontweight='bold')
    ax.set_xlim(0, 1)
    ax.set_ylim(0, 1)
    ax.tick_params(axis='x', labelsize=20)
    ax.tick_params(axis='y', labelsize=20)
    for tick in ax.get_xticklabels() + ax.get_yticklabels():
        tick.set_fontweight('bold')

# Add common x and y labels
fig.supxlabel(r'Resistant allele frequency at time $t$, $(p_{t})$', fontsize=35, fontweight='bold')
fig.supylabel('Resistant allele frequency \n at $t + 1$, $(p_{t+1})$', fontsize=35, fontweight='bold', multialignment='center')
fig.subplots_adjust(left=0.1, right=1.0, bottom=0.2)

# Save the figure to the Downloads folder
#download_path = os.path.join(os.path.expanduser('~'), 'Downloads', 'cobwebbing_method_all_four_cases.png')
#plt.savefig(download_path, dpi=300, bbox_inches='tight')

plt.show()
