# Importing libraries and packages
import os
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
import matplotlib.animation as animation
from IPython.display import HTML
from matplotlib.animation import FuncAnimation

# Initial parameters
na = 36
b = 0.5
mii = 0.3
gamma = 400

# Case I: Complete resistance – low fitness costs in refuge
wlr1, wlh1, wls1 = 1.0, 0.05, 0.0
wlr2, wlh2, wls2 = 0.9, 0.9, 1.0

# Case II: Complete resistance – high fitness costs in refuge
#wlr1, wlh1, wls1 = 1.0, 0.05, 0.0
#wlr2, wlh2, wls2 = 0.3, 0.9, 1.0

# Case III: Incomplete resistance
#wlr1, wlh1, wls1 = 0.5, 0.05, 0.0
#wlr2, wlh2, wls2 = 0.9, 0.9, 1.0

# Minimum number of cells to be occupied
min_cells = 15  

# Initial spatial distribution of genotypes
np.random.seed(41)
Xz = np.zeros((na, na))

np.random.seed(41)
Yz = np.zeros((na, na))
occupied_y = 0
while occupied_y < min_cells:
    for i in range(1, na-1):
        for j in range(1, na-1):
            if np.random.rand() < 0.01 and Yz[i, j] == 0:
                Yz[i, j] = 49
                occupied_y += 1
            if occupied_y >= min_cells:
                break
        if occupied_y >= min_cells:
            break

np.random.seed(41)
Hz = np.zeros((na, na))
occupied_h = 0
while occupied_h < min_cells:
    for i in range(1, na-1):
        for j in range(1, na-1):
            if np.random.rand() < 0.01 and Hz[i, j] == 0:
                Hz[i, j] = 1
                occupied_h += 1
            if occupied_h >= min_cells:
                break
        if occupied_h >= min_cells:
            break

# Function to create Wx, Wy, and Wz with refuge around
def create_W_matrices_condition_based(na, condition):
    if condition == 1:
        Wx = np.array([[0 if i < 1 or i > na - 2 or j < 1 or j > na - 2 else wlr2 if i == 1 or i == na - 2 or j == 1 or j == na - 2 else wlr1 for j in range(na)] for i in range(na)])
        Wy = np.array([[0 if i < 1 or i > na - 2 or j < 1 or j > na - 2 else wls2 if i == 1 or i == na - 2 or j == 1 or j == na - 2 else wls1 for j in range(na)] for i in range(na)])
        Wz = np.array([[0 if i < 1 or i > na - 2 or j < 1 or j > na - 2 else wlh2 if i == 1 or i == na - 2 or j == 1 or j == na - 2 else wlh1 for j in range(na)] for i in range(na)])
    elif condition == 2:
        Wx = np.array([[0 if i < 1 or i > na - 2 or j < 1 or j > na - 2 else wlr2 if 1 <= i <= 2 or 33 <= i <= na - 2 or 1 <= j <= 2 or 33 <= j <= na - 2 else wlr1 for j in range(na)] for i in range(na)])
        Wy = np.array([[0 if i < 1 or i > na - 2 or j < 1 or j > na - 2 else wls2 if 1 <= i <= 2 or 33 <= i <= na - 2 or 1 <= j <= 2 or 33 <= j <= na - 2 else wls1 for j in range(na)] for i in range(na)])
        Wz = np.array([[0 if i < 1 or i > na - 2 or j < 1 or j > na - 2 else wlh2 if 1 <= i <= 2 or 33 <= i <= na - 2 or 1 <= j <= 2 or 33 <= j <= na - 2 else wlh1 for j in range(na)] for i in range(na)])
    elif condition == 3:
        Wx = np.array([[0 if i < 1 or i > na - 2 or j < 1 or j > na - 2 else wlr2 if 1 <= i <= 3 or 32 <= i <= na - 2 or 1 <= j <= 3 or 32 <= j <= na - 2 else wlr1 for j in range(na)] for i in range(na)])
        Wy = np.array([[0 if i < 1 or i > na - 2 or j < 1 or j > na - 2 else wls2 if 1 <= i <= 3 or 32 <= i <= na - 2 or 1 <= j <= 3 or 32 <= j <= na - 2 else wls1 for j in range(na)] for i in range(na)])
        Wz = np.array([[0 if i < 1 or i > na - 2 or j < 1 or j > na - 2 else wlh2 if 1 <= i <= 3 or 32 <= i <= na - 2 or 1 <= j <= 3 or 32 <= j <= na - 2 else wlh1 for j in range(na)] for i in range(na)])
    elif condition == 4:
        Wx = np.array([[0 if i < 1 or i > na - 2 or j < 1 or j > na - 2 else wlr2 if 1 <= i <= 4 or 31 <= i <= na - 2 or 1 <= j <= 4 or 31 <= j <= na - 2 else wlr1 for j in range(na)] for i in range(na)])
        Wy = np.array([[0 if i < 1 or i > na - 2 or j < 1 or j > na - 2 else wls2 if 1 <= i <= 4 or 31 <= i <= na - 2 or 1 <= j <= 4 or 31 <= j <= na - 2 else wls1 for j in range(na)] for i in range(na)])
        Wz = np.array([[0 if i < 1 or i > na - 2 or j < 1 or j > na - 2 else wlh2 if 1 <= i <= 4 or 31 <= i <= na - 2 or 1 <= j <= 4 or 31 <= j <= na - 2 else wlh1 for j in range(na)] for i in range(na)])
    elif condition == 5:
        Wx = np.array([[0 if i < 1 or i > na - 2 or j < 1 or j > na - 2 else wlr2 if 1 <= i <= 5 or 30 <= i <= na - 2 or 1 <= j <= 5 or 30 <= j <= na - 2 else wlr1 for j in range(na)] for i in range(na)])
        Wy = np.array([[0 if i < 1 or i > na - 2 or j < 1 or j > na - 2 else wls2 if 1 <= i <= 5 or 30 <= i <= na - 2 or 1 <= j <= 5 or 30 <= j <= na - 2 else wls1 for j in range(na)] for i in range(na)])
        Wz = np.array([[0 if i < 1 or i > na - 2 or j < 1 or j > na - 2 else wlh2 if 1 <= i <= 5 or 30 <= i <= na - 2 or 1 <= j <= 5 or 30 <= j <= na - 2 else wlh1 for j in range(na)] for i in range(na)])
    return Wx, Wy, Wz


# Conditions to be tested    
conditions = [1, 2, 3, 4, 5]


# Mapping of conditions to θ values (refuge area)
condition_to_value = {
    "1": 132,
    "2": 256,
    "3": 372,
    "4": 480, 
    "5": 580
}

# Diffusion
def diff_matrix(matrix, mii):
    n = matrix.shape[0]
    diffused_matrix = np.zeros_like(matrix)
    
    # Central region 
    for i in range(1, n-1):
        for j in range(1, n-1):
            diffused_matrix[i,j] = (1 - mii) * matrix[i,j] + mii/4 * (
                matrix[i-1,j] + matrix[i+1,j] + matrix[i,j-1] + matrix[i,j+1])
    
    # Top boundary 
    for j in range(1, n-1):
        diffused_matrix[0,j] = (1 - mii) * matrix[0,j] + mii/4 * (
            matrix[1,j] + matrix[1,j] +  
            matrix[0,j-1] + matrix[0,j+1])  
    
    # Bottom boundary 
    for j in range(1, n-1):
        diffused_matrix[n-1,j] = (1 - mii) * matrix[n-1,j] + mii/4 * (
            matrix[n-2,j] + matrix[n-2,j] +  
            matrix[n-1,j-1] + matrix[n-1,j+1])
    
    # Left boundary 
    for i in range(1, n-1):
        diffused_matrix[i,0] = (1 - mii) * matrix[i,0] + mii/4 * (
            matrix[i-1,0] + matrix[i+1,0] +  
            matrix[i,1] + matrix[i,1]) 
    
    # Right boundary 
    for i in range(1, n-1):
        diffused_matrix[i,n-1] = (1 - mii) * matrix[i,n-1] + mii/4 * (
            matrix[i-1,n-1] + matrix[i+1,n-1] +  
            matrix[i,n-2] + matrix[i,n-2])  
    
    return diffused_matrix



# Initializes dictionaries to store different types of simulation data
results = {}
generations_to_half = {}
evolution_data = {} 

# Iteration over each condition
for condition in conditions:
    Wx, Wy, Wz = create_W_matrices_condition_based(na, condition)

    # Stores the temporal evolution of each genotype
    evolution_data[condition] = {
        'RG': [],
        'SG': [],
        'HG': []
    }

    iterations = 51

    # Stores the frequencies of each genotype
    vfplr, vfpls, vfplh = [], [], []

    # Temporary genotype distribution (initial state)
    Xz_temp, Yz_temp, Hz_temp = np.copy(Xz), np.copy(Yz), np.copy(Hz)

    # Stores the initial condition (generation 0)
    evolution_data[condition]['RG'].append(Xz_temp.copy())
    evolution_data[condition]['SG'].append(Yz_temp.copy())
    evolution_data[condition]['HG'].append(Hz_temp.copy())

    # Space-time update loop
    for gen in range(iterations):
        for _ in range(1): # diffusion steps (k=1, k=5, k=10)
            hax = diff_matrix(Xz_temp, mii)
            hay = diff_matrix(Yz_temp, mii)
            hah = diff_matrix(Hz_temp, mii)

            Xz_temp, Yz_temp, Hz_temp = hax, hay, hah

           
        A = 0.5 * (hax + hay + hah)

        P = np.zeros((na, na))
        Q = np.zeros((na, na))
        for i in range(na):
            for j in range(na):
                              if hax[i, j] + hay[i, j] + hah[i, j] > 0:
                                 P[i, j] = (hax[i, j] + 0.5 * hah[i, j]) / (hax[i, j] + hay[i, j] + hah[i, j])
                                 Q[i, j] = (hay[i, j] + 0.5 * hah[i, j]) / (hax[i, j] + hay[i, j] + hah[i, j])

        X = (P**2 * gamma * A / (1 + b * A)) * Wx
        Y = (Q**2 * gamma * A / (1 + b * A)) * Wy
        Z = (2 * P * Q * gamma * A / (1 + b * A)) * Wz

        # Stores the current state for animation
        evolution_data[condition]['RG'].append(Xz_temp.copy())
        evolution_data[condition]['SG'].append(Yz_temp.copy())
        evolution_data[condition]['HG'].append(Hz_temp.copy())

        Xz_temp, Yz_temp, Hz_temp = X, Y, Z

        # Aggregate total genotype frequencies
        ptlr = np.sum(X)
        ptls = np.sum(Y)
        ptlh = np.sum(Z)

        # Frequency of each genotype
        fplr = ptlr / (ptlr + ptls + ptlh)
        fpls = ptls / (ptlr + ptls + ptlh)
        fplh = ptlh / (ptlr + ptls + ptlh)

        # Frequency of the resistant allele
        fpr = (ptlr + 0.5*ptlh) / (ptlr + ptls + ptlh)

        # Stores genotype frequencies over time
        vfplr.append(fplr)
        vfpls.append(fpls)
        vfplh.append(fplh)

        # Checks whether the resistant allele reaches or exceeds 1/2
        if fpr >= 0.5 and condition not in generations_to_half:
            generations_to_half[condition] = gen + 1  # Stores the number of generations until 1/2

    # If it didn't reach 1/2 after all iterations, add 0
    if condition not in generations_to_half:
        generations_to_half[condition] = 0  

    # Saving the results for the current condition
    results[condition] = (vfplr, vfpls, vfplh)

# Plotting the results
plt.figure(figsize=(10, 6))
lines = []
labels = []


# Resistant genotype curves
for condition in conditions:
    vfplr, vfpls, vfplh = results[condition]
    N_2 = (condition_to_value[str(condition)] / 1156) * 100  
    N_2_str = str(int(N_2))[:2]  
    line_res, = plt.plot(vfplr, label=fr'RG ($N_2 = {N_2_str}$%)', linestyle='solid')
    lines.append(line_res)
    labels.append(fr'RG ($N_2 = {N_2_str}$%)')

# Susceptible genotype curves
for condition in conditions:
    vfplr, vfpls, vfplh = results[condition]
    N_2 = (condition_to_value[str(condition)] / 1156) * 100 
    N_2_str = str(int(N_2))[:2]  
    line_sus, = plt.plot(vfpls, label=fr'SG ($N_2 = {N_2_str}$%)', linestyle='dotted')
    lines.append(line_sus)
    labels.append(fr'SG ($N_2 = {N_2_str}$%)')

# Heterozygous genotype curves
for condition in conditions:
    vfplr, vfpls, vfplh = results[condition]
    N_2 = (condition_to_value[str(condition)] / 1156) * 100  
    N_2_str = str(int(N_2))[:2]  
    line_het, = plt.plot(vfplh, label=fr'HG ($N_2 = {N_2_str}$%)', linestyle='dashed')
    lines.append(line_het)
    labels.append(fr'HG ($N_2 = {N_2_str}$%)')



# Setting the axes and title
plt.xlabel("Generations", fontsize=27, fontweight='bold')
plt.ylabel("Genotype Frequency", fontsize=27, fontweight='bold')
plt.xlim(-0.5, 50)

ax = plt.gca() 
ax.tick_params(axis='both', labelsize=17)  
for label in ax.get_xticklabels() + ax.get_yticklabels():
    label.set_fontweight('bold')  
# Legend
plt.legend(lines, labels, loc='center left', bbox_to_anchor=(1.02, 0.5),  prop={'weight': 'bold', 'size': 18})
plt.tight_layout()  
plt.grid(False)

# Saving the figure in the Downloads folder
download_path = os.path.join(os.path.expanduser('~'), 'Downloads', 'around_configuration_parameter_set1_reaction_difusion.png')
plt.savefig(download_path, dpi=300, bbox_inches='tight')

plt.show()

# Displaying the number of generations until the resistant allele reaches 1/2
generation_values = []
for condition, gen_count in generations_to_half.items():
    generation_values.append(gen_count)

print("around =", generation_values)
#############################################################################################################################
##########################################  SPATIAL DISTRIBUTION ############################################################
#############################################################################################################################

# Condition and times
condition = 2  # other conditions: 1, 2, 3, 4, 5
it_values = [5, 10, 50]

# Genotype spatial distribution at selected times
def get_data(genotype):
    return [evolution_data[condition][genotype][t] for t in it_values]

# Spatial data for each genotype
rg = get_data('RG')
sg = get_data('SG')
hg = get_data('HG')

# Create a 3x3 grid of subplots
fig, axs = plt.subplots(3, 3, figsize=(9, 10))  

# Lists of genotype data and corresponding labels 
genotype_labels = ["Resistant\nGenotype", "Susceptible\nGenotype", "Heterozygous\nGenotype"]
genotype_data = [rg, sg, hg]

# Main loop
for row, (label, data) in enumerate(zip(genotype_labels, genotype_data)):
    for col, (t, img) in enumerate(zip(it_values, data)):
        ax = axs[row, col]
        ax.imshow(img, cmap='binary')
        
        if row == 0:
            ax.set_title(f't={t}', fontsize=20, weight='bold')

        ax.add_patch(Rectangle((0, 0), 1, 1, transform=ax.transAxes, ec='black', lw=3, fill=False))
        ax.axis('off')

    axs[row, 0].annotate(label, xy=(-0.22, 0.5), xycoords='axes fraction', fontsize=18, weight='bold', ha='center', va='center', rotation=90)

plt.subplots_adjust(left=0.15, right=0.95, top=0.7, bottom=0.00, hspace=0.03, wspace=0.02)

# Save the figure in the Downloads folder
plt.savefig(os.path.expanduser('~/Downloads/spatial_distribution_around.png'), dpi=200, bbox_inches='tight')

plt.show()

#############################################################################################################################
################################################# ANIMATION #################################################################
#############################################################################################################################

# Condition
condition_to_animate = 2  # other conditions: 1, 2, 3, 4, 5

# Checks whether the folder exists
os.makedirs('animations', exist_ok=True)

#Creating the figure
fig = plt.figure(figsize=(15, 5))
gs = fig.add_gridspec(2, 3, height_ratios=[10, 1])
axes = [fig.add_subplot(gs[0, i]) for i in range(3)]
text_ax = fig.add_subplot(gs[1, :])

titles = ["Resistant", "Susceptible", "Heterozygous"]

# Dynamic bottom text 
text_ax.axis('off')
title_text = text_ax.text(
    0.5, 0.5, "", ha='center', va='center',
    fontsize=20, fontweight='bold',
    transform=text_ax.transAxes
)

# Animation update function
def update(frame):
    for ax, title, data in zip(axes, titles, ['RG', 'SG', 'HG']):
        ax.clear()
        ax.imshow(evolution_data[condition_to_animate][data][frame], 
                  cmap='binary', interpolation='none')
        ax.set_title(f"{title}", fontweight='bold', fontsize=30)  
        ax.axis('off')
        rect = Rectangle((0, 0), 1, 1, transform=ax.transAxes, 
                         linewidth=4, edgecolor='black', facecolor='none')
        ax.add_patch(rect)
    
    title_text.set_text(f"Generation {frame}")
    title_text.set_fontsize(30)

    return axes + [title_text]

# Creates the animation
anim = FuncAnimation(fig, update, frames=51, interval=300)

# Saving the GIF 
download_path = os.path.join(os.path.expanduser('~'), 'Downloads', f'animation_around.gif')
anim.save(download_path, writer='pillow', fps=3, dpi=100)

# Display in notebook 
HTML(anim.to_jshtml())